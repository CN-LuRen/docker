version: "3"

services:
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # root 密码
      MYSQL_ROOT_PASSWORD: dev112233
      # 初始化数据库
      MYSQL_DATABASE: dev
    ports:
      - 3306:3306
    volumes:
      # 数据挂载
      - /docker/mysql/data/:/var/lib/mysql/
      # 配置挂载
      - /docker/mysql/conf/:/etc/mysql/conf.d/
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1
    privileged: true
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.36

  nacos:
    image: nacos/nacos-server:latest
    container_name: nacos
    ports:
      - 8848:8848
      - 9848:9848
      - 9849:9849
    environment:
      TZ: Asia/Shanghai
      MODE: standalone
    volumes:
      - /docker/nacos/logs/:/home/nacos/logs
      - /docker/nacos/config/custom.properties:/home/nacos/init.d/custom.properties
    privileged: true
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.40

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      # 配置文件
      - /docker/redis/conf:/redis/config
      # 数据文件
      - /docker/redis/data/:/redis/data/
    command: "redis-server /redis/config/redis.conf"
    privileged: true
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.48

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      # api 端口
      - 9000:9000
      # 控制台端口
      - 9001:9001
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      # 管理后台用户名
      MINIO_ROOT_USER: dev
      # 管理后台密码，最小8个字符
      MINIO_ROOT_PASSWORD: dev112233
      # https需要指定域名
      MINIO_SERVER_URL: ""
      # 开启压缩 on 开启 off 关闭
      MINIO_COMPRESS: "off"
      # 扩展名 .pdf,.doc 为空 所有类型均压缩
      MINIO_COMPRESS_EXTENSIONS: ""
      # mime 类型 application/pdf 为空 所有类型均压缩
      MINIO_COMPRESS_MIME_TYPES: ""
    volumes:
      # 映射当前目录下的data目录至容器内/data目录
      - /docker/minio/data:/data
      # 映射配置目录
      - /docker/minio/config:/root/.minio/
    command: server --address ':9000' --console-address ':9001' /data # 指定容器中的目录 /data
    privileged: true
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.54

  seata-server:
    image: seataio/seata-server:latest
    container_name: seata-server
    ports:
      - 8091:8091
    environment:
      TZ: Asia/Shanghai
      # 注意 此处ip如果是外网使用 要改为外网ip
      SEATA_IP: 172.30.0.58
      SEATA_PORT: 8091
      STORE_MODE: db
      SEATA_CONFIG_NAME: file:/root/seata-config/registry
    volumes:
      - /docker/seata/config:/root/seata-config
    privileged: true
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.58

  nginx:
    image: nginx:latest
    container_name: nginx
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - 80:80
      - 443:443
    volumes:
      # 证书映射
      - /docker/nginx/cert:/etc/nginx/cert
      # 配置文件映射
      - /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      # 页面目录
      - /docker/nginx/html:/usr/share/nginx/html
      # 日志目录
      - /docker/nginx/log:/var/log/nginx
    privileged: true
    restart: always
    networks:
      - dev_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      - /docker/prometheus/conf/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.62

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - 3000:3000
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.66

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      # 时区上海
      TZ: Asia/Shanghai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev112233
    volumes:
      - /docker/postgres/data:/var/lib/postgresql/data
    ports:
      - 5432:5432
      - 6432:6432
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.70

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - 9187:9187
    restart: always
    environment:
      # 这里指定的是要监控的 Postgres 数据库
      - DATA_SOURCE_NAME=postgresql://postgres:dev112233@postgres:5432/postgres?sslmode=disable
    networks:
      dev_net:
        ipv4_address: 172.30.0.244

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    command: -redis.addr redis://redis:6379 -redis.password 'dev112233'
    ports:
      - 9121:9121
    restart: always
    networks:
      dev_net:
        ipv4_address: 172.30.0.248

  mysql-exporter:
    image: prom/mysqld-exporter:latest
    container_name: mysql-exporter
    ports:
      - 9104:9104
    restart: always
    environment:
      # 这里指定的是要监控的 MySQL 数据库
      - DATA_SOURCE_NAME=root:dev112233@(mysql:3306)/dev
    networks:
      dev_net:
        ipv4_address: 172.30.0.252

networks:
  dev_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
